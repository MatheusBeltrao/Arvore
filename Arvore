import java.util.Random;

class No {
    int dado;
    No esquerda, direita;

    public No(int item) {
        dado = item;
        esquerda = direita = null;
    }
}

class ArvoreBinaria { 
    No raiz;

    // Inserção de nós na árvore

    public void inserir(int valor) {
        No novoNo = new No(valor);

        if (raiz == null) {
            raiz = novoNo;
        } else {
            No atual = raiz;
            while (true) {
                if (valor < atual.dado) {
                    if (atual.esquerda == null) {
                        atual.esquerda = novoNo;
                        break;
                    } else {
                        atual = atual.esquerda;
                    }
                } else {
                    if (atual.direita == null) {
                        atual.direita = novoNo;
                        break;
                    } else {
                        atual = atual.direita;
                    }
                }
            }
        }
    }

    // Algoritmo DSW

    public void dsw() {
        arvoreParaVideira(raiz);
        int tamanho = 0;
        No temp = raiz;
        while (temp.direita != null) {
            temp = temp.direita;
            tamanho++;
        }
        int folhas = tamanho + 1 - (int) Math.pow(2, Math.floor(Math.log(tamanho + 1) / Math.log(2)));
        compressao(raiz, folhas);
        tamanho = tamanho - folhas;
        while (tamanho > 1) {
            compressao(raiz, tamanho / 2);
            tamanho = tamanho / 2;
        }
    }

    // Transforma a árvore em uma videira

    public void arvoreParaVideira(No raiz) {
        No cauda = raiz;
        No resto = raiz.direita;
        No temp;
        while (resto != null) {
            if (resto.esquerda == null) {
                cauda = resto;
                resto = resto.direita;
            } else {
                temp = resto.esquerda;
                resto.esquerda = temp.direita;
                temp.direita = resto;
                resto = temp;
                cauda.direita = temp;
            }
        }
    }

    // Comprime a árvore

    public void compressao(No raiz, int contagem) {
        No scanner = raiz;
        No filho;
        for (int i = 0; i < contagem; i++) {
            filho = scanner.direita;
            scanner.direita = filho.direita;
            scanner = scanner.direita;
            filho.direita = scanner.esquerda;
            scanner.esquerda = filho;
        }
    }

    public static void main(String[] args) {
        ArvoreBinaria arvore = new ArvoreBinaria();
        Random rand = new Random();

        // 1) Crie uma árvore com 100 números aleatórios de 0 a 100
        for (int i = 0; i < 100; i++) {
            int num = rand.nextInt(101);
            arvore.inserir(num);
        }

        // Implemente o Algoritmo DSW para construir uma árvore binária balanceada
        arvore.dsw();

        // 2) Acrescente 20 números na árvore
        for (int i = 0; i < 20; i++) {
            int num = rand.nextInt(101);
            arvore.inserir(num);
        }

        // A partir da nova árvore, implemente o Algoritmo DSW para construir uma árvore binária balanceada
        arvore.dsw();

        // Imprima a árvore em ordem
     }
    public void emOrdem() {
    emOrdemAux(raiz);
}

private void emOrdemAux(No no) {
    if (no != null) {
        emOrdemAux(no.esquerda);
        System.out.println(no.dado);
        emOrdemAux(no.direita);
    }
       }
    }
       
 
 
