class No {
    int dado;
    No esquerda, direita;

    public No(int item) {
        dado = item;
        esquerda = direita = null;
    }
}

class ArvoreBinaria {
    No raiz;

    void emOrdem() {
        emOrdemUtil(this.raiz);
    }

    void emOrdemUtil(No no) {
        if (no == null)
            return;

        emOrdemUtil(no.esquerda);
        System.out.print(no.dado + " ");
        emOrdemUtil(no.direita);
    }

    void arvoreParaVideira(No raiz) {
        No cauda = raiz;
        No resto = raiz.direita;
        No temp;
        while (resto != null) {
            if (resto.esquerda == null) {
                cauda = resto;
                resto = resto.direita;
            } else {
                temp = resto.esquerda;
                resto.esquerda = temp.direita;
                temp.direita = cauda.direita;
                cauda.direita = temp;
                cauda = temp;
            }
        }
    }

    void compressao(No raiz, int contagem) {
        No scanner = raiz;
        No filho;
        for (int i = 0; i < contagem; i++) {
            filho = scanner.direita;
            scanner.direita = filho.direita;
            scanner = scanner.direita;
            filho.direita = scanner.esquerda;
            scanner.esquerda = filho;
        }
    }

    void dsw() {
        No pseudoRaiz = new No(0);
        pseudoRaiz.direita = raiz;
        arvoreParaVideira(pseudoRaiz);
        raiz = pseudoRaiz.direita;

        int tamanho = 0;
        No temp = raiz;
        while (temp != null) {
            temp = temp.direita;
            tamanho++;
        }

        int folhas = tamanho + 1 - (int) Math.pow(2, Math.floor(Math.log(tamanho + 1) / Math.log(2)));
        compressao(pseudoRaiz, folhas);
        tamanho = tamanho - folhas;
        while (tamanho > 1) {
            compressao(pseudoRaiz, tamanho / 2);
            tamanho = tamanho / 2;
        }
        raiz = pseudoRaiz.direita;
    }

    public static void main(String[] args) {
        // Seu código para criar a árvore e chamar dsw() e emOrdem()
        ArvoreBinaria arvore = new ArvoreBinaria();
    arvore.raiz = new No(10);
    arvore.raiz.esquerda = new No(8);
    arvore.raiz.direita = new No(12);
    arvore.raiz.esquerda.esquerda = new No(7);
    arvore.raiz.esquerda.direita = new No(9);
    arvore.raiz.direita.esquerda = new No(11);
    arvore.raiz.direita.direita = new No(13);
    arvore.raiz.esquerda.esquerda.esquerda = new No(6);
    arvore.raiz.esquerda.esquerda.direita = new No(5);
    arvore.raiz.esquerda.direita.esquerda = new No(4);
    arvore.raiz.direita.esquerda.esquerda = new No(2);
    arvore.raiz.esquerda.direita.direita = new No(3);
    
    arvore.raiz.direita.esquerda.direita = new No(1);
    arvore.raiz.direita.direita.esquerda = new No(14);
    arvore.raiz.direita.direita.direita = new No(15);
    arvore.raiz.direita.direita.direita.esquerda = new No(16);
    arvore.raiz.direita.direita.direita.direita = new No(17);
    arvore.raiz.direita.direita.direita.direita.esquerda = new No(18);
    arvore.raiz.direita.direita.direita.direita.direita = new No(19);
    arvore.raiz.direita.direita.direita.direita.direita.direita = new No(20);

    arvore.dsw();
    arvore.emOrdem(); 
    }
}
